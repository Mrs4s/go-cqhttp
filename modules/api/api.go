// Code generated by cmd/api-generator. DO NOT EDIT.

package api

import (
	"github.com/Mrs4s/go-cqhttp/coolq"
	"github.com/Mrs4s/go-cqhttp/global"
	"github.com/Mrs4s/go-cqhttp/pkg/onebot"
)

func (c *Caller) call(action string, spec *onebot.Spec, p Getter) global.MSG {
	if spec.Version == 11 {
		switch action {
		case ".handle_quick_operation":
			p0 := p.Get("context")
			p1 := p.Get("operation")
			return c.bot.CQHandleQuickOperation(p0, p1)
		case "can_send_image":
			return c.bot.CQCanSendImage()
		case "can_send_record":
			return c.bot.CQCanSendRecord()
		case "get_login_info":
			return c.bot.CQGetLoginInfo()
		case "get_stranger_info":
			p0 := p.Get("user_id").Int()
			return c.bot.CQGetStrangerInfo(p0)
		case "get_version_info":
			return c.bot.CQGetVersionInfo()
		case "send_forward_msg":
			p0 := p.Get("group_id").Int()
			p1 := p.Get("user_id").Int()
			p2 := p.Get("messages")
			p3 := p.Get("message_type").String()
			return c.bot.CQSendForwardMessage(p0, p1, p2, p3)
		case "send_group_forward_msg":
			p0 := p.Get("group_id").Int()
			p1 := p.Get("messages")
			return c.bot.CQSendGroupForwardMessage(p0, p1)
		case "send_group_msg":
			p0 := p.Get("group_id").Int()
			p1 := p.Get("message")
			p2 := p.Get("auto_escape").Bool()
			return c.bot.CQSendGroupMessage(p0, p1, p2)
		case "send_msg":
			p0 := p.Get("group_id").Int()
			p1 := p.Get("user_id").Int()
			p2 := p.Get("message")
			p3 := p.Get("message_type").String()
			p4 := p.Get("auto_escape").Bool()
			return c.bot.CQSendMessage(p0, p1, p2, p3, p4)
		case "send_private_forward_msg":
			p0 := p.Get("user_id").Int()
			p1 := p.Get("messages")
			return c.bot.CQSendPrivateForwardMessage(p0, p1)
		case "send_private_msg":
			p0 := p.Get("user_id").Int()
			p1 := p.Get("group_id").Int()
			p2 := p.Get("message")
			p3 := p.Get("auto_escape").Bool()
			return c.bot.CQSendPrivateMessage(p0, p1, p2, p3)
		}
	}
	if spec.Version == 12 {
		switch action {
		case "get_self_info":
			return c.bot.CQGetLoginInfo()
		case "get_user_info":
			p0 := p.Get("user_id").Int()
			return c.bot.CQGetStrangerInfo(p0)
		case "get_version":
			return c.bot.CQGetVersion()
		case "send_message":
			p0 := p.Get("group_id").String()
			p1 := p.Get("user_id").String()
			p2 := p.Get("detail_type").String()
			p3 := p.Get("message")
			return c.bot.CQSendMessageV12(p0, p1, p2, p3)
		}
	}
	switch action {
	case ".get_word_slices":
		p0 := p.Get("content").String()
		return c.bot.CQGetWordSlices(p0)
	case ".ocr_image", "ocr_image":
		p0 := p.Get("image").String()
		return c.bot.CQOcrImage(p0)
	case "_del_group_notice":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("notice_id").String()
		return c.bot.CQDelGroupMemo(p0, p1)
	case "_get_group_notice":
		p0 := p.Get("group_id").Int()
		return c.bot.CQGetGroupMemo(p0)
	case "_get_model_show":
		p0 := p.Get("model").String()
		return c.bot.CQGetModelShow(p0)
	case "_send_group_notice":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("content").String()
		p2 := p.Get("image").String()
		return c.bot.CQSetGroupMemo(p0, p1, p2)
	case "_set_model_show":
		p0 := p.Get("model").String()
		p1 := p.Get("model_show").String()
		return c.bot.CQSetModelShow(p0, p1)
	case "check_url_safely":
		p0 := p.Get("url").String()
		return c.bot.CQCheckURLSafely(p0)
	case "create_group_file_folder":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("parent_id").String()
		p2 := p.Get("name").String()
		return c.bot.CQGroupFileCreateFolder(p0, p1, p2)
	case "create_guild_role":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("name").String()
		p2 := uint32(p.Get("color").Uint())
		p3 := p.Get("independent").Bool()
		p4 := p.Get("initial_users")
		return c.bot.CQCreateGuildRole(p0, p1, p2, p3, p4)
	case "delete_essence_msg":
		p0 := int32(p.Get("message_id").Int())
		return c.bot.CQDeleteEssenceMessage(p0)
	case "delete_friend":
		p0 := p.Get("[user_id,id].0").Int()
		return c.bot.CQDeleteFriend(p0)
	case "delete_group_file":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("file_id").String()
		p2 := int32(p.Get("[busid,bus_id].0").Int())
		return c.bot.CQGroupFileDeleteFile(p0, p1, p2)
	case "delete_group_folder":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("folder_id").String()
		return c.bot.CQGroupFileDeleteFolder(p0, p1)
	case "delete_guild_role":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("role_id").Uint()
		return c.bot.CQDeleteGuildRole(p0, p1)
	case "delete_msg":
		p0 := int32(p.Get("message_id").Int())
		return c.bot.CQDeleteMessage(p0)
	case "delete_unidirectional_friend":
		p0 := p.Get("user_id").Int()
		return c.bot.CQDeleteUnidirectionalFriend(p0)
	case "download_file":
		p0 := p.Get("url").String()
		p1 := p.Get("headers")
		p2 := int(p.Get("thread_count").Int())
		return c.bot.CQDownloadFile(p0, p1, p2)
	case "get_essence_msg_list":
		p0 := p.Get("group_id").Int()
		return c.bot.CQGetEssenceMessageList(p0)
	case "get_forward_msg":
		p0 := p.Get("[message_id,id].0").String()
		return c.bot.CQGetForwardMessage(p0)
	case "get_friend_list":
		return c.bot.CQGetFriendList(spec)
	case "get_group_at_all_remain":
		p0 := p.Get("group_id").Int()
		return c.bot.CQGetAtAllRemain(p0)
	case "get_group_file_system_info":
		p0 := p.Get("group_id").Int()
		return c.bot.CQGetGroupFileSystemInfo(p0)
	case "get_group_file_url":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("file_id").String()
		p2 := int32(p.Get("[busid,bus_id].0").Int())
		return c.bot.CQGetGroupFileURL(p0, p1, p2)
	case "get_group_files_by_folder":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("folder_id").String()
		return c.bot.CQGetGroupFilesByFolderID(p0, p1)
	case "get_group_honor_info":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("type").String()
		return c.bot.CQGetGroupHonorInfo(p0, p1)
	case "get_group_info":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("no_cache").Bool()
		return c.bot.CQGetGroupInfo(p0, p1, spec)
	case "get_group_list":
		p0 := p.Get("no_cache").Bool()
		return c.bot.CQGetGroupList(p0, spec)
	case "get_group_member_info":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("user_id").Int()
		p2 := p.Get("no_cache").Bool()
		return c.bot.CQGetGroupMemberInfo(p0, p1, p2)
	case "get_group_member_list":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("no_cache").Bool()
		return c.bot.CQGetGroupMemberList(p0, p1)
	case "get_group_msg_history":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("message_seq").Int()
		return c.bot.CQGetGroupMessageHistory(p0, p1)
	case "get_group_root_files":
		p0 := p.Get("group_id").Int()
		return c.bot.CQGetGroupRootFiles(p0)
	case "get_group_system_msg":
		return c.bot.CQGetGroupSystemMessages()
	case "get_guild_channel_list":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("no_cache").Bool()
		return c.bot.CQGetGuildChannelList(p0, p1)
	case "get_guild_list":
		return c.bot.CQGetGuildList()
	case "get_guild_member_list":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("next_token").String()
		return c.bot.CQGetGuildMembers(p0, p1)
	case "get_guild_member_profile":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("user_id").Uint()
		return c.bot.CQGetGuildMemberProfile(p0, p1)
	case "get_guild_meta_by_guest":
		p0 := p.Get("guild_id").Uint()
		return c.bot.CQGetGuildMetaByGuest(p0)
	case "get_guild_msg":
		p0 := p.Get("message_id").String()
		p1 := p.Get("no_cache").Bool()
		return c.bot.CQGetGuildMessage(p0, p1)
	case "get_guild_roles":
		p0 := p.Get("guild_id").Uint()
		return c.bot.CQGetGuildRoles(p0)
	case "get_guild_service_profile":
		return c.bot.CQGetGuildServiceProfile()
	case "get_image":
		p0 := p.Get("file").String()
		return c.bot.CQGetImage(p0)
	case "get_msg":
		p0 := int32(p.Get("message_id").Int())
		return c.bot.CQGetMessage(p0)
	case "get_online_clients":
		p0 := p.Get("no_cache").Bool()
		return c.bot.CQGetOnlineClients(p0)
	case "get_status":
		return c.bot.CQGetStatus(spec)
	case "get_supported_actions":
		return c.bot.CQGetSupportedActions(spec)
	case "get_topic_channel_feeds":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("channel_id").Uint()
		return c.bot.CQGetTopicChannelFeeds(p0, p1)
	case "get_unidirectional_friend_list":
		return c.bot.CQGetUnidirectionalFriendList()
	case "mark_msg_as_read":
		p0 := int32(p.Get("message_id").Int())
		return c.bot.CQMarkMessageAsRead(p0)
	case "qidian_get_account_info":
		return c.bot.CQGetQiDianAccountInfo()
	case "reload_event_filter":
		p0 := p.Get("file").String()
		return c.bot.CQReloadEventFilter(p0)
	case "send_group_sign":
		p0 := p.Get("group_id").Int()
		return c.bot.CQSendGroupSign(p0)
	case "send_guild_channel_msg":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("channel_id").Uint()
		p2 := p.Get("message")
		p3 := p.Get("auto_escape").Bool()
		return c.bot.CQSendGuildChannelMessage(p0, p1, p2, p3)
	case "set_essence_msg":
		p0 := int32(p.Get("message_id").Int())
		return c.bot.CQSetEssenceMessage(p0)
	case "set_friend_add_request":
		p0 := p.Get("flag").String()
		p1 := true
		if pt := p.Get("approve"); pt.Exists() {
			p1 = pt.Bool()
		}
		return c.bot.CQProcessFriendRequest(p0, p1)
	case "set_group_add_request":
		p0 := p.Get("flag").String()
		p1 := p.Get("[sub_type,type].0").String()
		p2 := p.Get("reason").String()
		p3 := true
		if pt := p.Get("approve"); pt.Exists() {
			p3 = pt.Bool()
		}
		return c.bot.CQProcessGroupRequest(p0, p1, p2, p3)
	case "set_group_admin":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("user_id").Int()
		p2 := true
		if pt := p.Get("enable"); pt.Exists() {
			p2 = pt.Bool()
		}
		return c.bot.CQSetGroupAdmin(p0, p1, p2)
	case "set_group_anonymous":
		p0 := p.Get("group_id").Int()
		p1 := true
		if pt := p.Get("enable"); pt.Exists() {
			p1 = pt.Bool()
		}
		return c.bot.CQSetGroupAnonymous(p0, p1)
	case "set_group_anonymous_ban":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("[anonymous_flag,anonymous.flag].0").String()
		p2 := int32(p.Get("duration").Int())
		return c.bot.CQSetGroupAnonymousBan(p0, p1, p2)
	case "set_group_ban":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("user_id").Int()
		p2 := uint32(1800)
		if pt := p.Get("duration"); pt.Exists() {
			p2 = uint32(pt.Uint())
		}
		return c.bot.CQSetGroupBan(p0, p1, p2)
	case "set_group_card":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("user_id").Int()
		p2 := p.Get("card").String()
		return c.bot.CQSetGroupCard(p0, p1, p2)
	case "set_group_kick":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("user_id").Int()
		p2 := p.Get("message").String()
		p3 := p.Get("reject_add_request").Bool()
		return c.bot.CQSetGroupKick(p0, p1, p2, p3)
	case "set_group_leave":
		p0 := p.Get("group_id").Int()
		return c.bot.CQSetGroupLeave(p0)
	case "set_group_name":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("group_name").String()
		return c.bot.CQSetGroupName(p0, p1)
	case "set_group_portrait":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("file").String()
		p2 := p.Get("cache").String()
		return c.bot.CQSetGroupPortrait(p0, p1, p2)
	case "set_group_special_title":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("user_id").Int()
		p2 := p.Get("special_title").String()
		return c.bot.CQSetGroupSpecialTitle(p0, p1, p2)
	case "set_group_whole_ban":
		p0 := p.Get("group_id").Int()
		p1 := true
		if pt := p.Get("enable"); pt.Exists() {
			p1 = pt.Bool()
		}
		return c.bot.CQSetGroupWholeBan(p0, p1)
	case "set_guild_member_role":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("set").Bool()
		p2 := p.Get("role_id").Uint()
		p3 := p.Get("users")
		return c.bot.CQSetGuildMemberRole(p0, p1, p2, p3)
	case "set_qq_profile":
		p0 := p.Get("nickname")
		p1 := p.Get("company")
		p2 := p.Get("email")
		p3 := p.Get("college")
		p4 := p.Get("personal_note")
		return c.bot.CQSetQQProfile(p0, p1, p2, p3, p4)
	case "update_guild_role":
		p0 := p.Get("guild_id").Uint()
		p1 := p.Get("role_id").Uint()
		p2 := p.Get("name").String()
		p3 := uint32(p.Get("color").Uint())
		p4 := p.Get("indepedent").Bool()
		return c.bot.CQModifyRoleInGuild(p0, p1, p2, p3, p4)
	case "upload_group_file":
		p0 := p.Get("group_id").Int()
		p1 := p.Get("file").String()
		p2 := p.Get("name").String()
		p3 := p.Get("folder").String()
		return c.bot.CQUploadGroupFile(p0, p1, p2, p3)
	case "upload_private_file":
		p0 := p.Get("user_id").Int()
		p1 := p.Get("file").String()
		p2 := p.Get("name").String()
		return c.bot.CQUploadPrivateFile(p0, p1, p2)
	}
	return coolq.Failed(404, "API_NOT_FOUND", "API不存在")
}
